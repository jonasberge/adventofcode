0: 4 1 5
1: 2 3 | 3 2
2: 4 4 | 5 5
3: 4 5 | 5 4
4: "a"
5: "b"

ababbb


c: current character
n: copy of m, for iterating
m: all current states that matched previous characters
t: working stack reflecting the state that to be saved
s: current working stack stepping down the rule tree



== CHAR(0) [a]babbb ==

c: a
n: -
m:
>> (0,0,0)
t: -
s: -



c: a
n:
>> (0,0,0) *
m: -
t: -
s: 
(0,0,0) = 4



c: a
n:
>> (0,0,0) *
m: -
t: a (0,0,0) (4,0,0)
s:
(0,0,0) = 4
(4,0,0) = a  # MATCH -> pop()



c: a  # -> next()
n:
>> (0,0,0) *
m: -
t: a (0,0,0)
s: 
(0,0,0) = 4  # has_next ? next() : pop() -> next()



== CHAR(1) a[b]abbb ==

c: b
n: -
m:
>> (0,0,1)
t: -
s: -



c: b
n:
>> (0,0,1) *
m: -
t: -
s:
(0,0,1) = 1  # options - took 0, remaining: 1
(1,0,0) = 2



c: b
n:
>> (0,0,1) *
m: -
t: -
s: 
(0,0,1) = 1  # options - took 0, remaining: 1
(1,0,0) = 2  # options - took 0, remaining: 1
(2,0,0) = 4
(4,0,0) = a  # MISMATCH -> pop()



c: b
n:
>> (0,0,1) *
m: -
t: -
s: 
(0,0,1) = 1  # options - took 0, remaining: 1
(1,0,0) = 2  # options - took 1
(2,1,0) = 5



c: b
n:
>> (0,0,1) *
m: -
t: b (0,0,1) (1,0,0) (2,1,0) (5,0,0)
s: 
(0,0,1) = 1  # options - took 0, remaining: 1
(1,0,0) = 2  # options - took 1
(2,1,0) = 5
(5,0,0) = b  # MATCH -> go back until state has a next index



c: b
n:
>> (0,0,1) *
m: -
t: b (0,0,1) (1,0,0) (2,1,0)
s: 
(0,0,1) = 1  # options - took 0, remaining: 1
(1,0,0) = 2  # options - took 1
(2,1,0) = 5  # has next index -> increment -> store in m



c: b
n:
>> (0,0,1) *
m:
>> b (0,0,1) (1,0,0) (2,1,1)
t: -
s: 
(0,0,1) = 1  # options - took 1



c: b
n:
>> (0,0,1) *
m:
>> b (0,0,1) (1,0,0) (2,1,1)
t: -
s: 
(0,0,1) = 1  # options - took 1
(1,1,0) = 3  # options - took 0, remaining: 1
(3,0,0) = 4
(4,0,0) = a  # MISMATCH



c: b
n:
>> (0,0,1) *
m:
>> b (0,0,1) (1,0,0) (2,1,1)
t: b (0,0,1) (1,1,0) (3,1,0) (5,0,0)
s: 
(0,0,1) = 1  # options - took 1
(1,1,0) = 3  # options - took 1
(3,1,0) = 5
(5,0,0) = b  # MATCH



c: b
n:
>> (0,0,1) *
m:
>> b (0,0,1) (1,0,0) (2,1,1)
t: b (0,0,1) (1,1,0) (3,1,1)
s: 
(0,0,1) = 1  # options - took 1
(1,1,0) = 3  # options - took 1
(3,1,0) = 5  # has next index -> increment -> store in m



c: b
n:
>> (0,0,1) *
m:
>> b (0,0,1) (1,0,0) (2,1,1)
t: b (0,0,1) (1,1,0) (3,1,1)
s: 
(0,0,1) = 1  # options - took 1
(1,1,0) = 3  # options - took 1
(3,1,0) = 5  # has next index



c: b
n: -
m:
>> b (0,0,1) (1,0,0) (2,1,1)
>> b (0,0,1) (1,1,0) (3,1,1)
t: -
s: -



== CHAR(2) ab[a]bbb ==

c: a
n: -
m:
>> b (0,0,1) (1,0,0) (2,1,1)
>> b (0,0,1) (1,1,0) (3,1,1)
t: -
s: -



c: a
n:
>> b (0,0,1) (1,0,0) (2,1,1) *
>> b (0,0,1) (1,1,0) (3,1,1)
m: -
t: -
s:
(0,0,1) ...
(1,0,0) ...
(2,1,1) = 5
(5,0,0) = b  # MISMATCH



c: a
n:
>> b (0,0,1) (1,0,0) (2,1,1)
>> b (0,0,1) (1,1,0) (3,1,1) *
m: -
t: -
s:
(0,0,1) ...
(1,1,0) ...
(3,1,1) = 4
(4,0,0) = a  # MATCH



c: a
n:
>> b (0,0,1) (1,0,0) (2,1,1)
>> b (0,0,1) (1,1,0) (3,1,1) *
m: -
t: b (0,0,1) (1,1,0) (3,1,1)
s:
(0,0,1) ...
(1,1,0) ...
(3,1,1) = 4  # cannot increment index - (,,1) is at last element



c: a
n:
>> b (0,0,1) (1,0,0) (2,1,1)
>> b (0,0,1) (1,1,0) (3,1,1) *
m: -
t: b (0,0,1) (1,1,1)
s:
(0,0,1) ...
(1,1,0) ...  # can increment -> increment -> add to m



c: a
n: -
m:
>> b (0,0,1) (1,1,1)
t: -
s: -



== CHAR(3) aba[b]bb ==

c: b
n:
>> b (0,0,1) (1,1,1) *
m: -
t: -
s:
(0,0,1) ...
(1,1,1) = 2  # options - took 0, remaining: 1
(2,0,0) = 4
(4,0,0) = a  # MISMATCH



c: b
n:
>> b (0,0,1) (1,1,1) *
m: -
t: b (0,0,1) (1,1,1) (2,1,0) (5,0,0)
s:
(0,0,1) ...
(1,1,1) = 2  # options - took 1
(2,1,0) = 5
(5,0,0) = b  # MATCH



c: b
n:
>> b (0,0,1) (1,1,1) *
m: -
t: b (0,0,1) (1,1,1) (2,1,1)
s:
(0,0,1) ...
(1,1,1) = 2  # options - took 1
(2,1,0) = 5  # can increment



c: b
n:
>> b (0,0,1) (1,1,1) *
m:
>> b (0,0,1) (1,1,1) (2,1,1)
t: -
s: -



c: b
n: -
m:
>> b (0,0,1) (1,1,1) (2,1,1)
t: -
s: -



== CHAR(4) abab[b]b ==

c: b
n:
>> b (0,0,1) (1,1,1) (2,1,1) *
m: -
t: b (0,0,1) (1,1,1) (2,1,1) (5,0,0)
s:
(0,0,1) ...
(1,1,1) ...
(2,1,1) = 5
(5,0,0) = b  # MATCH



c: b
n:
>> b (0,0,1) (1,1,1) (2,1,1) *
m: -
t: b (0,0,1) (1,1,1) (2,1,1)
s:
(0,0,1) ...
(1,1,1) ...
(2,1,1) = 5  # no next index



c: b
n:
>> b (0,0,1) (1,1,1) (2,1,1) *
m: -
t: b (0,0,1) (1,1,1)
s:
(0,0,1) ...
(1,1,1) ...  # no next index



c: b
n:
>> b (0,0,1) (1,1,1) (2,1,1) *
m: -
t: b (0,0,2)
s:
(0,0,1) ...  # has next index -> increment



c: b
n:
>> b (0,0,1) (1,1,1) (2,1,1) *
m:
>> b (0,0,2)
t: -
s: -



== CHAR(5) ababb[b] ==

c: b
n: -
m:
>> b (0,0,2)
t: -
s: -



c: b
n:
>> b (0,0,2) *
m: -
t: (0,0,2)
s:
(0,0,2) = 5
(5,0,0) = b  # MATCH



c: b
n:
>> b (0,0,2) *
m: -
t: ?
s:
(0,0,2) = 5  # cannot increment



c: b
n:
>> b (0,0,2) *
m: -
t: ?
s: -


-> t is empty and cannot leave that state
=> DONE


















0: 4..
0: (a)..

a..... ok


0: (a)1.
0: (a)(2.|3.).
0: (a)((4.|5.).|3.).
0: (a)((4.|5.).|(4.|5.).).
0: (a)(((a).|(b).).|((a).|(b).).).

ab.... ok

0: (a)(((b).).|((b).).).


0: 415
0: ( a )15
0: ( a )( 23 | 32 )5
0: ( a )( ( 44 | 55 )3 | 32 )5
0: ( a )( ( ( a )4 | 55 )3 | 32 )5
0: ( a )( ( ( a )( a ) | 55 )3 | 32 )5
0: ( a )( ( ( a )( a ) | ( b )5 )3 | 32 )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )3 | 32 )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( 45 | 54 ) | 32 )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )5 | 54 ) | 32 )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )( b ) | 54 ) | 32 )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )( b ) | ( b )4 ) | 32 )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )( b ) | ( b )( a ) ) | 32 )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )( b ) | ( b )( a ) ) | ( 45 | 54 )2 )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )( b ) | ( b )( a ) ) | ( ( a )5 | 54 )2 )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )( b ) | ( b )( a ) ) | ( ( a )( b ) | 54 )2 )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )( b ) | ( b )( a ) ) | ( ( a )( b ) | ( b )4 )2 )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )( b ) | ( b )( a ) ) | ( ( a )( b ) | ( b )( a ) )2 )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )( b ) | ( b )( a ) ) | ( ( a )( b ) | ( b )( a ) )( 44 | 55 ) )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )( b ) | ( b )( a ) ) | ( ( a )( b ) | ( b )( a ) )( ( a )4 | 55 ) )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )( b ) | ( b )( a ) ) | ( ( a )( b ) | ( b )( a ) )( ( a )( a ) | 55 ) )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )( b ) | ( b )( a ) ) | ( ( a )( b ) | ( b )( a ) )( ( a )( a ) | ( b )5 ) )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )( b ) | ( b )( a ) ) | ( ( a )( b ) | ( b )( a ) )( ( a )( a ) | ( b )( b ) ) )5
0: ( a )( ( ( a )( a ) | ( b )( b ) )( ( a )( b ) | ( b )( a ) ) | ( ( a )( b ) | ( b )( a ) )( ( a )( a ) | ( b )( b ) ) )( b )

0: a( ( aa | bb )( ab | ba ) | ( ab | ba )( aa | bb ) )b

^a((aa|bb)(ab|ba)|(ab|ba)(aa|bb))b$







136 rules

with every rule: at least 2 rules will be excluded
(except those rules that print a character or a single rule number)

0: 1 # 135 left
1: 3 # 133 left

...

d: (d + d + 1) # (136 - d - d - 1) left
d: (2d + 1) # (136 - 2d - 1) left

...

33: 67 # 69
34: 69 # 67

...

136 - 2d - 1 = 0
2d = 135
d = 135 / 2
d = 67.5

floor(d) = 67

...

67: 135 # 1





-     # 136 left
0: 1  # 135 left
1: 3  # 132 left
2: 7  # ...
2: 


1 + 2 + 4 + ... + x <= 135

1 + 2 + 3 + ... + x = 2x - 1

2x - 1 <= 135
x <= 135 / 2
x <= 67.5

x = 64

2^d = x
2^d = 64
d = log_2(64)
d = 6






d: (d + d + 1) # (136 - d - d - 1) left
d: (2d + 1) # (136 - 2d - 1) left

2d + 1 > 136 - 2d - 1  | + 2d
4d + 1 > 136 - 1       | - 1
4d     > 134           | / 4
d      > 33.5

floor(d) = 33
